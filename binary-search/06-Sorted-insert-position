// https://www.interviewbit.com/problems/sorted-insert-position/

int SOLVE(int L, int U, int key, vector<int> &A){
    int mid = (U+L)/2;
    
    if(L <= U){
        if(key > A[mid]){
            L = mid+1;
            return SOLVE(L, U, key, A);
        }
        else if(key < A[mid]){
            U = mid-1;
            return SOLVE(L, U, key, A);
        }    
    }
    else{
        if(key == A[mid])
            return mid;
        else if(key > A[mid])
            return mid+1;
        else if(key < A[mid])
            return mid;
    }
    return mid;     
}

int Solution::searchInsert(vector<int> &A, int B) {
    int U, L, key, position = 0;
    
    L = 0;
    U = A.size()-1;
    key = B;
    
    if(A[U] < key){
        return A.size();
    }    
    else if(A[0] > key){
        return 0;
    }
    else{
        position = SOLVE(L, U, key, A);
    }
    return position;
}
